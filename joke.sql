
--table with joke sentences
create table joke_sentences (
	joke_id int generated by default as identity,
	joke_sentence varchar(1000) not null,
	primary key(joke_id)
);

--table with actual jokes and their actuality
create table actual_jokes (
	joke_id int unique,
	actuality float,
	overlooked_users_number int not null,
	foreign key (joke_id)
		references joke_sentences(joke_id)
);


--table with users
create table users (
	user_id int generated by default as identity,
	user_telegram_id int not null unique,
	primary key(user_id)
);


--table with users times, period - time when we need to send joke,
--remainer time after we should send joke
create table user_time (
	user_id int unique,
	period_time int not null,
	residue_time int not null,
	foreign key (user_id)
		references users(user_id)
);

--table with users favorite jokes
create table favorite_jokes (
	user_id int,
	joke_id int,
	foreign key (user_id)
		references users(user_id),
	foreign key (joke_id)
		references joke_sentences(joke_id)
);

--table with users revier of jokes
create table viewed_jokes(
	user_id int,
	joke_id int,
	foreign key (user_id)
		references users(user_id),
	foreign key (joke_id)
		references joke_sentences(joke_id)
);

--------------------------------------------------------------------------------------------------
--реализуем все возможные запросы!!!
--------------------------------------------------------------------------------------------------

--get_user_id_by_telegram_id
create or replace function get_user_id_by_telegram_id(telegram_id int)
returns int
as $$
declare 
	output_user_id int;
begin
	select 
		users.user_id 
	from
		users 
	where 
		users.user_telegram_id = telegram_id
	into output_user_id;

	return output_user_id;
end;
$$ language plpgsql;

create or replace function add_new_to_actual_jokes(joke_count int)
returns boolean as $$
declare 
	current_joke_id int;
	new_actual_jokes integer[] := '{}'::integer[];
begin
	new_actual_jokes := array(
	select
		joke_sentences.joke_id
	from
		joke_sentences left outer join actual_jokes
		on 
			joke_sentences.joke_id = actual_jokes.joke_id
		where 
			actual_jokes.joke_id is null
	limit 
		joke_count);
	--add them to actual_jokes with default accuracy == 3 and = overlookes_user_number
	foreach current_joke_id in array new_actual_jokes 
	loop
		insert into actual_jokes(joke_id, actuality, overlooked_users_number) values(current_joke_id, 3, 0);	
	end loop;
	return array_length(new_actual_jokes, 1) <> 0;
end;
$$ language plpgsql;

--user_viewed_jokes
--функция возвращающая шутки просмотренные пользователем
create or replace function user_viewed_jokes(current_user_id int)
returns table(
	joke_id int
)
as $$
begin
	return query 
	select
		viewed_jokes.joke_id as joke_id
	from 
		viewed_jokes
	where 
		viewed_jokes.user_id = current_user_id;
end;
$$ language plpgsql;

	
--get_best_joke_for_user
create or replace function get_best_joke_for_user(current_telegram_user_id int)
returns table(
	joke_id int,
	joke_sentence varchar(1000)
)
as $$
declare 
	current_user_id int;
	joke_id_for_user int;
begin
	--get_user_id
	select * from get_user_id_by_telegram_id(current_telegram_user_id) into current_user_id;
	--update actuality and remember the new_values
	select 
		actual_jokes.joke_id
	from 
		actual_jokes
		left outer join (select * from user_viewed_jokes(current_user_id)) as user_viewed_jokes
		on actual_jokes.joke_id = user_viewed_jokes.joke_id 
	where 
		user_viewed_jokes.joke_id is null
	order by 
		actual_jokes.actuality
	limit 
		1
	into joke_id_for_user;
	--Добавляем что юзер просмотрел эту шутку
	if joke_id_for_user is null then
	return;
	end if;
	
	insert into viewed_jokes(user_id, joke_id) values (current_user_id, joke_id_for_user);
	joke_id := joke_id_for_user;
	joke_sentence := get_joke_sentence_by_id(joke_id_for_user);
	return next;
end;
$$ language plpgsql;


select joke_id, joke_sentence from get_best_joke_for_user(522424165);

--get_random_joke_for_user
--берём шутки простомтренные пользователем
--убираем их из списка актуальных для него и далее выбираем случайную!
create or replace function get_random_joke_for_user(current_telegram_user_id int)
returns table(
	joke_id int,
	joke_sentence varchar(1000)
)
as $$
declare 
	current_user_id int;
	joke_id_for_user int;
begin
	--get_user_id
	select * from get_user_id_by_telegram_id(current_telegram_user_id) into current_user_id;
	--update actuality and remember the new_values
	select 
		actual_jokes.joke_id
	from 
		actual_jokes
		left outer join (select * from user_viewed_jokes(current_user_id)) as user_viewed_jokes
		on actual_jokes.joke_id = user_viewed_jokes.joke_id 
	where 
		user_viewed_jokes.joke_id is null
	order by 
		random()
	limit 
		1
	into joke_id_for_user;
	--Добавляем что юзер просмотрел эту шутку
	if joke_id_for_user is null then
	return;
	end if;
	
	insert into viewed_jokes(user_id, joke_id) values (current_user_id, joke_id_for_user);
	joke_id := joke_id_for_user;
	joke_sentence := get_joke_sentence_by_id(joke_id_for_user);
	return next;
end;
$$ language plpgsql;


create or replace function get_favorite_joke_for_user(current_telegram_user_id int)
returns table(
	joke_id int,
	joke_sentence varchar(1000)
)
as $$
declare 
	current_user_id int;
	joke_id_for_user int;
begin
	--get_user_id
	select * from get_user_id_by_telegram_id(current_telegram_user_id) into current_user_id;
	--get joke!
	select 
		favorite_jokes.joke_id
	from 
		favorite_jokes
	where 
		favorite_jokes.user_id = current_user_id
	order by 
		random()
	limit 
		1
	into joke_id_for_user;

	if joke_id_for_user is null then
	return;
	end if;
	
	joke_id := joke_id_for_user;
	joke_sentence := get_joke_sentence_by_id(joke_id_for_user);
	return next;
end;
$$ language plpgsql;

create or replace procedure add_user_period_request(user_telegram_id int, period_time int)
language plpgsql
as $$
declare 
	current_user_id int;
begin
	--get_user_id
	select * from get_user_id_by_telegram_id(user_telegram_id) into current_user_id;
	--insert or update this users period 
	insert into user_time(user_id, period_time, residue_time) values (current_user_id, add_user_period_request.period_time, add_user_period_request.period_time)
	on conflict (user_id) do update
		set period_time = add_user_period_request.period_time,
			residue_time = add_user_period_request.period_time;
end;$$

create or replace procedure add_favorite_joke(user_telegram_id int, joke_id int)
language plpgsql
as $$
declare 
	current_user_id int;
begin
	--get_user_id
	select * from get_user_id_by_telegram_id(user_telegram_id) into current_user_id;
	--insert into favorite_jokes
	insert into favorite_jokes(user_id, joke_id) values (current_user_id, joke_id);
end;$$

create or replace procedure delete_from_favorite_joke(user_telegram_id int, current_joke_id int)
language plpgsql
as $$
declare 
	current_user_id int;
begin
	--get_user_id
	select * from get_user_id_by_telegram_id(user_telegram_id) into current_user_id;
	--insert into favorite_jokes
	delete from favorite_jokes where favorite_jokes.user_id = current_user_id and favorite_jokes.joke_id = current_joke_id;
end;$$

--take sentence with joke_id
create or replace function get_joke_sentence_by_id(current_joke_id int)
returns varchar(1000)
as $$
declare 
joke_sent varchar(1000);
begin
	select 
		joke_sentences.joke_sentence
	from 
		joke_sentences 
	where joke_id = current_joke_id 
	into joke_sent;
	return joke_sent;
end;
$$ language plpgsql;


--------------------------------------------------------------------------------------------------
--delete_from_favorite(user_id)
--	insert into favorite_jokes(joke_id, user_id) values (4, 1)
delete from 
	favorite_jokes f
where 
	f.joke_id = 4 and f.user_id = 1
--------------------------------------------------------------------------------------------------
--delete_into_favorite(user_id)
insert into favorite_jokes(joke_id, user_id) values (4, 1)
--------------------------------------------------------------------------------------------------

--add_new_user(user_telegram_id)
insert into users(user_telegram_id) values (232)
--------------------------------------------------------------------------------------------------

--delete_joke_from_actual_jokes
create or replace procedure delete_joke_from_actual_jokes(delete_joke_id int)
language plpgsql
as $$
begin
	--delete row in actual_jokes
	delete from 
		actual_jokes 
	where 
		actual_jokes.joke_id = delete_joke_id;
	--delete all rows in viewed_jokes
	delete from
		viewed_jokes
	where 
		viewed_jokes.joke_id = delete_joke_id;
	--check if that joke in favorite if not we delete from joke_sentences
	
	if not exists(
		select from 
			favorite_jokes fj 
		where 
			fj.joke_id = delete_joke_id
	) then 
		delete from 
			joke_sentences js 
		where 
			js.joke_id = delete_joke_id;
	end if;
end;$$

--delete_joke_from_favorite_jokes
create or replace procedure delete_joke_from_favorite_jokes(delete_joke_id int)
language plpgsql
as $$
begin
	--delete row in favorite_jokes
	delete from 
		favorite_jokes 
	where 
		favorite_jokes.joke_id = delete_joke_id;
	--check if that joke in actual_jokes if not we delete from joke_sentences
	
	if not exists(
		select from 
			actual_jokes fj 
		where 
			fj.joke_id = delete_joke_id
	) then 
		delete from 
			joke_sentences js 
		where 
			js.joke_id = delete_joke_id;
	end if;
end;$$

--add_evaluation_for_joke
create or replace procedure add_evaluation_for_joke(eval_joke_id int, evaluation int)
language plpgsql
as $$
declare 
	new_actuality float;
	new_viewed_number int;
begin
	--update actuality and remember the new_values
	update 
		actual_jokes a
	set
		actuality = (a.actuality * a.overlooked_users_number + evaluation) / (a.overlooked_users_number + 1),
		overlooked_users_number = a.overlooked_users_number + 1
	where
		a.joke_id = eval_joke_id
	returning a.actuality, a.overlooked_users_number into new_actuality, new_viewed_number;
			
	--check if new_actuality is too small and we need to delete this row
	if new_actuality < 3 and new_viewed_number > 4
	then 
		call delete_joke_from_actual_jokes(eval_joke_id);
	end if;

end;$$


--функция уменьшения времени в user_time и возвращении пользователям, время которых уменьшилось до нуля
create or replace function decrease_residual_time_for_everyone(past_time int)
returns table (
	updated_id integer
) as $$
declare
	row_to_update record;
begin
	drop table if exists users_in_time;
	create temporary table users_in_time (updated_id integer);

	for row_to_update in select user_id, period_time, residue_time from user_time loop
	row_to_update.residue_time := row_to_update.residue_time - past_time;
	if row_to_update.residue_time <= 0 and row_to_update.user_id is not null then
	--обновляем значение остаточного времени и заносим пользователя в набор тех кому надо прислать шутку
		row_to_update.residue_time := row_to_update.residue_time + row_to_update.period_time;
		insert into users_in_time (updated_id) values (row_to_update.user_id);	
	end if;
	update user_time SET residue_time = row_to_update.residue_time where user_time.user_id = row_to_update.user_id;
	return next;
	end loop;
	return query select users_in_time.updated_id from users_in_time where users_in_time.updated_id is not null;
end;
$$ language plpgsql;

--костыльный запрос убирающий нули!
select updated_id from decrease_residual_time_for_everyone(1) where updated_id is not null

truncate table joke_sentences cascade

select * from favorite_jokes fj  

select * from get_favorite_joke_for_user(522424165) 
